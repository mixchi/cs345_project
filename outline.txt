#Rough outline for ML model

#IMPORTS:
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler #(For standardizing data before training)
from sklearn.model_selection import train_test_split 
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline


#Import Data:
X = 2D grid
y = label


#def regression_model (X, y, time, height) if the model is meant to take in time and height seperately
def regression_model (X, y):
    #STANDARDIZE:
    scaler = StandardScaler()
    X = scaler.fit_transform(X)

    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

    #MODEL:
    #(model possibilities include: standard LinearRegression, PolynomialFeatures, or both, both are included in the case of comparing models)
    #LR: problematic if problem is non-linear
    #PF: performance could be poor

    linreg = make_pipeline(LinearRegression(), Ridge(alpha=0.001))
    ridge_model = make_pipeline(PolynomialFeatures(3), Ridge(alpha=0.01))

    linreg.fit(X, y)
    poly_model.fit(X, y)

    y_pred_lin = linreg.predict(X_test)
    y_pred_poly = ridge_model.fit(X_test)


    #Examples of evaluation techniques, could use any or all
    mae = mean_absolute_error(y_test, y_pred)  # Mean Absolute Error
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)  # Root Mean Squared Error
    r2 = r2_score(y_test, y_pred)  # R-squared

#Example Plot
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.grid(True)
plt.show()

#other plot ideas include but are not limited to:
    #sklearn's validation curve
    #grid search using alpha